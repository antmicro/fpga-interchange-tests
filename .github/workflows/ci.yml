# Copyright (C) 2021  The SymbiFlow Authors.
#
# Use of this source code is governed by a ISC-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/ISC
#
# SPDX-License-Identifier:ISC

name: FPGA interchange CI tests

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

jobs:
  Check-Repository:
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: SymbiFlow/actions/checks@main
      with:
        exclude_license: |
          - ./tests/designs/litex_linux/arty.v
          - ./conda_lock.yml

  Matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}

    steps:

      - name: Setup repository
        uses: actions/checkout@v3

      - name: Generate examples matrix
        id: generate
        run: ./.github/scripts/generate_job_matrix.py '${{ github.repository }}'


  Run-Tests:
    needs: Matrix

    runs-on: [self-hosted, Linux, X64]

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.Matrix.outputs.matrix)  }}

    container: ${{ matrix.os }}:${{ matrix.os-version }}

    env:
      LANG: en_US.UTF-8
      DEBIAN_FRONTEND: noninteractive
      GHA_EXTERNAL_DISK: tools
      XILINX_LOCAL_USER_DATA: no
      LC_ALL: C
      CMAKE_FLAGS: -DPNR_TOOL=${{ matrix.tool }}
    steps:

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install centos
      if: ${{matrix.os == 'centos'}}
      run: |
        .github/scripts/centos-setup.sh

    - name: Install
      if: ${{ matrix.os == 'ubuntu' }}
      run: |
        .github/scripts/ubuntu-setup.sh

    - name: Create environment
      run: make env

    - name: Build CMake
      run: |
        make build
        make update

    - name: Run nextpnr tests
      if: ${{ matrix.tool == 'nextpnr'  }}
      run: |
        .github/scripts/tests.sh ${{ matrix.device }} vendor-bit-tests

    - name: Run VPR tests
      if: ${{ matrix.tool == 'vpr'  }}
      run: |
        .github/scripts/tests.sh ${{ matrix.device }}

    - name: Prepare nextpnr report
      if: ${{ matrix.tool == 'nextpnr'  }}
      run: |
        source env/conda/bin/activate fpga-interchange
        cd build
        python3 ../utils/report_targets.py --log `find . -name "all-*-tests.log"` --csv report.csv --allowed-failures allowed-failures.log

    - name: Prepare VPR report
      if: ${{ matrix.tool == 'vpr'  }}
      run: |
        source env/conda/bin/activate fpga-interchange
        cd build
        python3 ../utils/report_targets.py --log `find . -name "all-*-tests.log"` --csv report.csv --allow-any-failure

    - uses: actions/upload-artifact@v2
      with:
        name: fpga-interchange-tests_${{ matrix.device }}_${{ matrix.tool }}_${{ matrix.os }}
        path: |
          **/plot_*.svg
          build/report*.csv

  Prepare-Design-Status-Report:
    runs-on: ubuntu-18.04
    needs: Run-Tests
    steps:

    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2

    - name: Result aggregation
      run: |
        python3 ./utils/aggregate_results.py --inp . --out ./report/source

    - name: Webpage build
      run: |
        cd report
        pip3 install setuptools
        pip3 install -r requirements.txt
        make html
        touch build/html/.nojekyll

    - uses: actions/upload-artifact@v2
      with:
        name: aggregated-results
        path: |
          report/build/*

    - name: Deploy to GH pages
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      run: |
        cd report/build/html
        git init
        cp ../../../.git/config ./.git/config
        git add .
        git config --local user.email "push@gha"
        git config --local user.name "GHA"
        git commit -am "update ${{ github.sha }}"
        git push -u origin +HEAD:gh-pages
        rm -rf .git

  Install-Interchange-Devices:
    runs-on: ubuntu-18.04
    needs: Run-Tests
    steps:

    - uses: actions/checkout@v2

    - name: Install interchange devices
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      run: |
        .github/scripts/install.sh
