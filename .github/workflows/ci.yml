# Copyright (C) 2021  The SymbiFlow Authors.
#
# Use of this source code is governed by a ISC-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/ISC
#
# SPDX-License-Identifier:ISC

name: FPGA interchange CI tests

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

jobs:
  Check-Repository:
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: SymbiFlow/actions/checks@main
      with:
        exclude_license: |
          - ./tests/designs/litex_linux/arty.v
          - ./conda_lock.yml

  Run-Nextpnr-Tests:
    runs-on: [self-hosted, Linux, X64]
    container: "ubuntu:20.04"
    strategy:
      fail-fast: false
      matrix:
        device: ["xc7a35t", "xc7a100t", "xc7a200t", "xc7s50", "xc7z010", "xczu7ev", "xc7k70t", "xc7k160t", "xc7k480t", "xc7vx980t", "LIFCL-40", "testarch"]
    env:
      LANG: "en_US.UTF-8"
      DEBIAN_FRONTEND: "noninteractive"
      GHA_EXTERNAL_DISK: "tools"
      XILINX_LOCAL_USER_DATA: "no"
      LC_ALL: "C"
    steps:

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install
      run: |
        apt-get -qqy update
        apt-get -qqy install build-essential git make locales libtinfo-dev \
          cmake python3 wget unzip curl openjdk-11-jdk-headless capnproto
        dpkg-reconfigure locales
        # Vivado is erroring out due to a missing library in CI.
        # https://support.xilinx.com/s/article/76585?language=en_US
        ln -s /lib/x86_64-linux-gnu/libtinfo.so.6 /lib/x86_64-linux-gnu/libtinfo.so.5

    - name: Create environment
      run: make env

    - name: Build CMake
      run: |
        make build
        make update

    - name: Run tests
      run: |
        .github/scripts/tests.sh ${{ matrix.device }} vendor-bit-tests

    - name: Prepare report
      run: |
        cd build
        python3 ../utils/report_targets.py --log `find . -name "all-*-tests.log"` --csv report.csv --allowed-failures allowed-failures.log

    - uses: actions/upload-artifact@v2
      with:
        name: fpga-interchange-tests-${{ matrix.device }}
        path: |
          **/plot_*.svg
          build/report*.csv

  Run-VPR-Tests:
    runs-on: [self-hosted, Linux, X64]
    container: "ubuntu:20.04"
    strategy:
      fail-fast: false
      matrix:
        device: ["xc7a35t", "LIFCL-40", "testarch"]
    env:
      LANG: "en_US.UTF-8"
      DEBIAN_FRONTEND: "noninteractive"
      GHA_EXTERNAL_DISK: "tools"
      XILINX_LOCAL_USER_DATA: "no"
      LC_ALL: "C"
    steps:

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install
      run: |
        apt-get -qqy update
        apt-get -qqy install build-essential git make locales libtinfo-dev \
          cmake python3 wget unzip curl openjdk-11-jdk-headless capnproto
        dpkg-reconfigure locales
        # Vivado is erroring out due to a missing library in CI.
        # https://support.xilinx.com/s/article/76585?language=en_US
        ln -s /lib/x86_64-linux-gnu/libtinfo.so.6 /lib/x86_64-linux-gnu/libtinfo.so.5

    - name: Create environment
      run: make env

    - name: Build CMake
      run: |
        make build
        make update
      env:
        CMAKE_FLAGS: "-DPNR_TOOL=vpr"

    - name: Run tests
      run: |
        .github/scripts/tests.sh ${{ matrix.device }}

    - name: Prepare report
      run: |
        cd build
        python3 ../utils/report_targets.py --log `find . -name "all-*-tests.log"` --csv report.csv --allow-any-failure

    - uses: actions/upload-artifact@v2
      with:
        name: fpga-interchange-tests-${{ matrix.device }}
        path: |
          **/plot_*.svg

  Prepare-Design-Status-Report:
    runs-on: ubuntu-18.04
    needs: Run-Nextpnr-Tests
    steps:

    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2

    - name: Result aggregation
      run: |
        python3 ./utils/aggregate_results.py --inp . --out ./report/source

    - name: Webpage build
      run: |
        cd report
        pip3 install setuptools
        pip3 install -r requirements.txt
        make html
        touch build/html/.nojekyll

    - uses: actions/upload-artifact@v2
      with:
        name: aggregated-results
        path: |
          report/build/*

    - name: Deploy to GH pages
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      run: |
        cd report/build/html
        git init
        cp ../../../.git/config ./.git/config
        git add .
        git config --local user.email "push@gha"
        git config --local user.name "GHA"
        git commit -am "update ${{ github.sha }}"
        git push -u origin +HEAD:gh-pages
        rm -rf .git

